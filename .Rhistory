install.packages("KernSmooth")
library(KernSmooth)
install.packages("devtools")
library(devtools)
find_rtools()
find_rtools()
swirl()
library(swirl)
swirl()
head(flags)
dim(flags)
class(flags)
cls_list<-lapply(flags,class)
cls_list
class(cls_list)
as.character(cls_list)
sapply(flags,class)
cls_vect<-sapply(flags,class)
class(cls_vect)
sum(flags$orange)
flag_colors<-flags[,11:17]
head(flags_colors)
head(flag_colors)
lapply(flag_colors,colSums)
lapply(flag_colors,sum)
sapply(flag_colors,sum)
sapply(flag_colors,mean)
flag_shapes<-flags[,19:23]
lapply(flag_shapes,range)
shape_mat<-sapply(flag_shapes,range)
shape_mat
class(shape_mat)
unique(c(3,4,5,5,5,6,6))
unique_vals<-lapply(flags,unique)
unique_vals
length(unique_vals)
sapply(unique_vals,length)
sapply(flags,unique)
lapply(unique_vals,function(elem)elem[2])
library(datasets)
data("iris")
mean(Sepal.Length)
iris
apply(iris,sepal.length,virginica,mean)
apply(iris,mean,"Sepal.Length","virginica")
apply(iris[101:150,1],mean)
mean(iris[101:150,1])
apply(iris,2,mean)
apply(iris[,1:4],2,mean)
apply(iris[,1:4],1,mean)
apply(iris,1,mean)
colmeans(iris)
colMeans(iris)
rowMeans(iris[,1:4])
data(mtcars)
?mtcars
lapply(mtcars,mean)
tapply(mtcars$mpg,mtcars$cyl,mean)
split(mtcars,mtcars$cyl)
with(mtcars,tapply(mpg,cyl,mean))
apply(mtcars,2,mean)
tapply(mtcars$cyl,mtcars$mpg,mean)
sapply(split(mtcars$mpg,mtcars$cyl),mean)
mean(mtcars$mpg,mtcars%cyl)
mean(mtcars$mpg,mtcars$cyl)
sapply(mtcars,cyl,mean)
tapply(mtcars$cyl,mtcars$hp,mean)
tapply(mtcars$hp,mtcars$cyl,mean)
209.2142-82.63636
debug(ls)
ls
library(datasets)
data("iris")
data(mtcars)
mean(mtcars$mpg,mtcars$cyl)
sapply(split(mtcars$mpg,mtcars$cyl)mean)
tapply(mtcars$cyl,mtcars$mpg,mean)
apply(mtcars,2,mean)
split(mtcars,mtcars$cyl)
sapply(mtcars,cyl,mean)
lappl(mtcars,mean)
lapply(mtcars,mean)
with(mtcars,tapply(mpg,cyl,mean))
with(iris,tapply(Sepal.Length,virginica,mean))
iris
?iris
apply(iris,1,mean)
colmeans(iris)
colMeans(iris)
apply(iris[,1:4],2,mean)
apply(iris,2,mean)
apply(iris[,1:4],1,mean)
rowMeans(iris[,1:4])
with(mtcars,tapply(hp,cyl,mean))
209.21429-82.6363
class(iris)
dim(iris)
rowMeans(iris[101:150])
rowMeans(iris[101:150,])
rowMeans(iris[,101:150])
with(iris,tapply(virginica,Sepal.L,mean))
with(iris,tapply(virginica,Sepal.Length,mean))
tapply(iris$Sepal.Length, iris$Species, mean)
rowMeans(iris[,1:4])
apply(iris[,1:4],2,mean)
apply(iris[,1:4],1,mean)
colMeans(iris)
apply(iris,1,mean)
apply(iris,2,mean)
apply(mtcars,2,mean)
split(mtcars,mtcars$cyl)
tapply(mtcars$mpg,mtcars$cyl,mean)
lapply(mtcars,mean)
sapply(split(mtcars$mpg,mtcars$cyl),mean
)
mean(mtcars$mpg,mtcars$cyl)
sapply(mtcars,cyl,mean)
with(mtcars,tapply(mpg,cyl,mean))
with(mtcars,tapply(hp,cyl,mean))
209.214-82.6363
library(swirl)
swirl()
sapply(flags,unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags,class)
vapply(flags,class,character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate,flags$landmass,mean)
tapply(flags$population)
tapply(flags$population,flags$red,summary)
tapply(flags$population,flags$landmass,summary)
setwd("~/DataScience/ProgrammingAssignment2")
cachematrix.r
cachematrix.R
source(cachematrix.R)
source("cachematrix.R")
set.seed(1110201)
r = rnorm(1000000)
x = matrix(r, nrow=1000, ncol=1000)
makeCacheMatrix(x)
cacheSolve(x)
debug(cacheSolve(x))
debug(cacheSolve)
x
testmat
set.seed(1110210)
r = rnorm(1000000)
z = matrix(r, nrow=1000, ncol=1000)
cacheSolve(x)
makeCacheMatrix(x)
source("cachematrix2.R")
makecachematrix2(x)
makeCacheMatrix2(x)
source("cacheMatrix.R")
makeCacheMatrix(x)
cacheSolve(x)
inv
?inverse
makeCacheMatrix2(x)
cacheSolve(x)
source("cachematrix2.R")
makeCacheMatrix2(x)
cacheSolve2(x)
b<-makeCacheMatrix2(x)
cachesolve2(b)
cacheSolve2(b)
cacheSolve2(b)
r = rnorm(100)
x = matrix(r, nrow=10, ncol=10)
makeCacheMatrix2(x)
cacheSolve2(x)
b<-MakeCacheMatrix2(x)
b<-makeCacheMatrix2(x)
cacheSolve2(b)
c<-makeCacheMatrix(x)
cacheSolve(c)==cacheSolve2(b)
cacheSolve(c)
?set
r = rnorm(100)
x = matrix(r, nrow=10, ncol=10)
makeCacheMatrix(x)
cacheSolve(x)
cacheSolve(makeCacheMatrix(x))
b<-makeCacheMatrix(x)
cacheSolve(b)
cacheSolve(b)
source("cachematrix.R")
makeCacheMatrix(x)
b<-makeCacheMatrix(x)
cacheSolve(b)
cacheSolve(b)
